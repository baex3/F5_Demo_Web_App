user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {

server {
	listen 443 ssl http2;
	server_name hamd.blogdns.net www.hamd.blogdns.net;

	#RSA Certificate
	ssl_certificate /etc/letsencrypt/live/hamd.blogdns.net/fullchain.pem; #Self-managed
	ssl_certificate_key /etc/letsencrypt/live/hamd.blogdns.net/privkey.pem; #Self-managed
	
	#Enforce TLSv1.2 or TLSv1.3 only	 
	ssl_protocols TLSv1.2 TLSv1.3;
	
	#Enforce the most secure ciphers only. Client will not be able to connect if it cannot accept any of the below ciphers
	ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256;
	ssl_prefer_server_ciphers on;

	#Cache TLS sessions, share resources between worker processes - 10MB of cache memory
	ssl_session_cache shared:SSL:10m;
	
	#Timeout for SSL sessions to remove cached sessions - cached for 10 mins
	ssl_session_timeout 10m;

	#Enforce HSTS header - this ensures, after first connection - client will not be able to send requests except over HTTPS, otherwise connection will be closed
	add_header 'Strict-Transport-Security' 'max-age=31536000'; #Enforcement is for a one-year period upon client

        listen 80;
	
	server_name _;
	
	#Redirect all http traffic to https
	return 301 https://$host$request_uri;

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Content-Type,Accept';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';

         location / {

        root /var/www/F5_Demo_Web_App/SportsApp-SPA/dist/SportsApp-SPA;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html?$args;
        }

    	location /api/ {
        proxy_pass         http://localhost:5000/api/;
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    	}	

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
                }
   }

server {
        listen  8001;

                location / {
                root /var/www/basic_sample_apps/html_app;
                index index.html;
                try_files $uri $uri/ /index.html;
            }
        }

        server {
		listen  8002;
                location / {
                root /var/www/basic_sample_apps/html_app2;
                index index.html;
                try_files $uri $uri/ /index.html;
            }
        }

        server {
		listen 8003;

                location / {
                root /var/www/basic_sample_apps/html_app3;
                index index.html;
                try_files $uri $uri/ /index.html;
            }
        }

        server {
		listen  8004;

                location / {
                root /var/www/basic_sample_apps/html_app4;
                index index.html;
                try_files $uri $uri/ /index.html;
            }
	}

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    real_ip_header X-Forwarded-For;

    #gzip  on;

}
